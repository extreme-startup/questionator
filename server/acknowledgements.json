[
  {
    "licenses": "MIT",
    "repository": "https://github.com/wbhob/nest-middlewares",
    "license": "MIT License\n\nCopyright (c) 2017 Wilson Hobbs\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
    "name": "@nest-middlewares/cookie-parser"
  },
  {
    "licenses": "MIT",
    "repository": "https://github.com/wbhob/nest-middlewares",
    "license": "MIT License\n\nCopyright (c) 2017 Wilson Hobbs\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
    "name": "@nest-middlewares/express-session"
  },
  {
    "licenses": "MIT",
    "repository": "https://github.com/nestjs/nest",
    "license": "(The MIT License)\n\nCopyright (c) 2017 Kamil Myśliwiec <http://kamilmysliwiec.com>\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
    "name": "@nestjs/common"
  },
  {
    "licenses": "MIT",
    "repository": "https://github.com/nestjs/nest",
    "license": "(The MIT License)\n\nCopyright (c) 2017 Kamil Myśliwiec <http://kamilmysliwiec.com>\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
    "name": "@nestjs/core"
  },
  {
    "licenses": "MIT",
    "license": "<p align=\"center\">\r\n  <a href=\"http://nestjs.com/\" target=\"blank\"><img src=\"https://nestjs.com/img/logo_text.svg\" width=\"320\" alt=\"Nest Logo\" /></a>\r\n</p>\r\n\r\n[travis-image]: https://api.travis-ci.org/nestjs/nest.svg?branch=master\r\n[travis-url]: https://travis-ci.org/nestjs/nest\r\n[linux-image]: https://img.shields.io/travis/nestjs/nest/master.svg?label=linux\r\n[linux-url]: https://travis-ci.org/nestjs/nest\r\n\r\n  <p align=\"center\">A progressive <a href=\"http://nodejs.org\" target=\"blank\">Node.js</a> framework for building efficient and scalable server-side applications, heavily inspired by <a href=\"https://angular.io\" target=\"blank\">Angular</a>.</p>\r\n    <p align=\"center\">\r\n<a href=\"https://www.npmjs.com/~nestjscore\"><img src=\"https://img.shields.io/npm/v/@nestjs/core.svg\" alt=\"NPM Version\" /></a>\r\n<a href=\"https://www.npmjs.com/~nestjscore\"><img src=\"https://img.shields.io/npm/l/@nestjs/core.svg\" alt=\"Package License\" /></a>\r\n<a href=\"https://www.npmjs.com/~nestjscore\"><img src=\"https://img.shields.io/npm/dm/@nestjs/core.svg\" alt=\"NPM Downloads\" /></a>\r\n<a href=\"https://travis-ci.org/nestjs/nest\"><img src=\"https://api.travis-ci.org/nestjs/nest.svg?branch=master\" alt=\"Travis\" /></a>\r\n<a href=\"https://travis-ci.org/nestjs/nest\"><img src=\"https://img.shields.io/travis/nestjs/nest/master.svg?label=linux\" alt=\"Linux\" /></a>\r\n<a href=\"https://coveralls.io/github/nestjs/nest?branch=master\"><img src=\"https://coveralls.io/repos/github/nestjs/nest/badge.svg?branch=master#5\" alt=\"Coverage\" /></a>\r\n<a href=\"https://gitter.im/nestjs/nestjs?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=body_badge\"><img src=\"https://badges.gitter.im/nestjs/nestjs.svg\" alt=\"Gitter\" /></a>\r\n<a href=\"https://opencollective.com/nest#backer\"><img src=\"https://opencollective.com/nest/backers/badge.svg\" alt=\"Backers on Open Collective\" /></a>\r\n<a href=\"https://opencollective.com/nest#sponsor\"><img src=\"https://opencollective.com/nest/sponsors/badge.svg\" alt=\"Sponsors on Open Collective\" /></a>\r\n  <a href=\"https://paypal.me/kamilmysliwiec\"><img src=\"https://img.shields.io/badge/Donate-PayPal-dc3d53.svg\"/></a>\r\n  <a href=\"https://twitter.com/nestframework\"><img src=\"https://img.shields.io/twitter/follow/nestframework.svg?style=social&label=Follow\"></a>\r\n</p>\r\n  <!--[![Backers on Open Collective](https://opencollective.com/nest/backers/badge.svg)](https://opencollective.com/nest#backer)\r\n  [![Sponsors on Open Collective](https://opencollective.com/nest/sponsors/badge.svg)](https://opencollective.com/nest#sponsor)-->\r\n\r\n## Description\r\n\r\n[OpenAPI (Swagger)](https://www.openapis.org/) module for [Nest](https://github.com/nestjs/nest).\r\n\r\n## Installation\r\n\r\n```bash\r\n$ npm i --save @nestjs/swagger\r\n```\r\n\r\n## Quick Start\r\n\r\n[Overview & Tutorial](https://docs.nestjs.com/recipes/swagger)\r\n\r\n## Support\r\n\r\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please [read more here](https://docs.nestjs.com/support).\r\n\r\n## Stay in touch\r\n\r\n* Author - [Kamil Myśliwiec](https://kamilmysliwiec.com)\r\n* Website - [https://nestjs.com](https://nestjs.com/)\r\n* Twitter - [@nestframework](https://twitter.com/nestframework)\r\n\r\n## License\r\n\r\nNest is [MIT licensed](LICENSE).\r\n",
    "name": "@nestjs/swagger"
  },
  {
    "licenses": "MIT",
    "license": "<p align=\"center\">\n  <a href=\"http://nestjs.com/\" target=\"blank\"><img src=\"https://nestjs.com/img/logo_text.svg\" width=\"320\" alt=\"Nest Logo\" /></a>\n</p>\n\n[travis-image]: https://api.travis-ci.org/nestjs/nest.svg?branch=master\n[travis-url]: https://travis-ci.org/nestjs/nest\n[linux-image]: https://img.shields.io/travis/nestjs/nest/master.svg?label=linux\n[linux-url]: https://travis-ci.org/nestjs/nest\n\n  <p align=\"center\">A progressive <a href=\"http://nodejs.org\" target=\"blank\">Node.js</a> framework for building efficient and scalable server-side applications, heavily inspired by <a href=\"https://angular.io\" target=\"blank\">Angular</a>.</p>\n    <p align=\"center\">\n<a href=\"https://www.npmjs.com/~nestjscore\"><img src=\"https://img.shields.io/npm/v/@nestjs/core.svg\" alt=\"NPM Version\" /></a>\n<a href=\"https://www.npmjs.com/~nestjscore\"><img src=\"https://img.shields.io/npm/l/@nestjs/core.svg\" alt=\"Package License\" /></a>\n<a href=\"https://www.npmjs.com/~nestjscore\"><img src=\"https://img.shields.io/npm/dm/@nestjs/core.svg\" alt=\"NPM Downloads\" /></a>\n<a href=\"https://travis-ci.org/nestjs/nest\"><img src=\"https://api.travis-ci.org/nestjs/nest.svg?branch=master\" alt=\"Travis\" /></a>\n<a href=\"https://travis-ci.org/nestjs/nest\"><img src=\"https://img.shields.io/travis/nestjs/nest/master.svg?label=linux\" alt=\"Linux\" /></a>\n<a href=\"https://coveralls.io/github/nestjs/nest?branch=master\"><img src=\"https://coveralls.io/repos/github/nestjs/nest/badge.svg?branch=master#5\" alt=\"Coverage\" /></a>\n<a href=\"https://gitter.im/nestjs/nestjs?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=body_badge\"><img src=\"https://badges.gitter.im/nestjs/nestjs.svg\" alt=\"Gitter\" /></a>\n<a href=\"https://opencollective.com/nest#backer\"><img src=\"https://opencollective.com/nest/backers/badge.svg\" alt=\"Backers on Open Collective\" /></a>\n<a href=\"https://opencollective.com/nest#sponsor\"><img src=\"https://opencollective.com/nest/sponsors/badge.svg\" alt=\"Sponsors on Open Collective\" /></a>\n  <a href=\"https://paypal.me/kamilmysliwiec\"><img src=\"https://img.shields.io/badge/Donate-PayPal-dc3d53.svg\"/></a>\n  <a href=\"https://twitter.com/nestframework\"><img src=\"https://img.shields.io/twitter/follow/nestframework.svg?style=social&label=Follow\"></a>\n</p>\n  <!--[![Backers on Open Collective](https://opencollective.com/nest/backers/badge.svg)](https://opencollective.com/nest#backer)\n  [![Sponsors on Open Collective](https://opencollective.com/nest/sponsors/badge.svg)](https://opencollective.com/nest#sponsor)-->\n\n## Description\n\nThe [TypeORM](http://typeorm.io) module for [Nest](https://github.com/nestjs/nest).\n\n## Installation\n\n```bash\n$ npm i --save @nestjs/typeorm typeorm\n```\n\n## Quick Start\n\n[Overview & Tutorial](https://docs.nestjs.com/techniques/sql)\n\n## Support\n\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please [read more here](https://docs.nestjs.com/support).\n\n## Stay in touch\n\n* Author - [Kamil Myśliwiec](https://kamilmysliwiec.com)\n* Website - [https://nestjs.com](https://nestjs.com/)\n* Twitter - [@nestframework](https://twitter.com/nestframework)\n\n## License\n\nNest is [MIT licensed](LICENSE).\n",
    "name": "@nestjs/typeorm"
  },
  {
    "licenses": "MIT",
    "repository": "https://github.com/nestjs/nest",
    "license": "(The MIT License)\n\nCopyright (c) 2017 Kamil Myśliwiec <http://kamilmysliwiec.com>\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
    "name": "@nestjs/websockets"
  },
  {
    "licenses": "MIT",
    "repository": "https://github.com/DefinitelyTyped/DefinitelyTyped",
    "license": "    MIT License\r\n\r\n    Copyright (c) Microsoft Corporation. All rights reserved.\r\n\r\n    Permission is hereby granted, free of charge, to any person obtaining a copy\r\n    of this software and associated documentation files (the \"Software\"), to deal\r\n    in the Software without restriction, including without limitation the rights\r\n    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n    copies of the Software, and to permit persons to whom the Software is\r\n    furnished to do so, subject to the following conditions:\r\n\r\n    The above copyright notice and this permission notice shall be included in all\r\n    copies or substantial portions of the Software.\r\n\r\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n    SOFTWARE\r\n",
    "name": "@types/dotenv"
  },
  {
    "licenses": "MIT",
    "repository": "https://github.com/DefinitelyTyped/DefinitelyTyped",
    "license": "    MIT License\r\n\r\n    Copyright (c) Microsoft Corporation. All rights reserved.\r\n\r\n    Permission is hereby granted, free of charge, to any person obtaining a copy\r\n    of this software and associated documentation files (the \"Software\"), to deal\r\n    in the Software without restriction, including without limitation the rights\r\n    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n    copies of the Software, and to permit persons to whom the Software is\r\n    furnished to do so, subject to the following conditions:\r\n\r\n    The above copyright notice and this permission notice shall be included in all\r\n    copies or substantial portions of the Software.\r\n\r\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n    SOFTWARE\r\n",
    "name": "@types/joi"
  },
  {
    "licenses": "MIT",
    "repository": "https://github.com/bripkens/connect-history-api-fallback",
    "license": "The MIT License\n\nCopyright (c) 2012 Ben Ripkens http://bripkens.de\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.",
    "name": "connect-history-api-fallback"
  },
  {
    "licenses": "BSD-2-Clause",
    "repository": "https://github.com/motdotla/dotenv",
    "license": "Copyright (c) 2015, Scott Motte\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n",
    "name": "dotenv"
  },
  {
    "licenses": "MIT",
    "repository": "https://github.com/chill117/express-mysql-session",
    "license": "The MIT License (MIT)\n\nCopyright (c) 2014 Charles Hill\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
    "name": "express-mysql-session"
  },
  {
    "licenses": "MIT",
    "repository": "https://github.com/expressjs/session",
    "license": "(The MIT License)\n\nCopyright (c) 2010 Sencha Inc.\nCopyright (c) 2011 TJ Holowaychuk <tj@vision-media.ca>\nCopyright (c) 2014-2015 Douglas Christopher Wilson <doug@somethingdoug.com>\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
    "name": "express-session"
  },
  {
    "licenses": "MIT",
    "repository": "https://github.com/wycats/handlebars.js",
    "license": "Copyright (C) 2011-2017 by Yehuda Katz\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n",
    "name": "handlebars"
  },
  {
    "licenses": "BSD-3-Clause",
    "repository": "https://github.com/hapijs/joi",
    "license": "Copyright (c) 2012-2018, Project contributors\nCopyright (c) 2012-2014, Walmart\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n    * Redistributions in binary form must reproduce the above copyright\n      notice, this list of conditions and the following disclaimer in the\n      documentation and/or other materials provided with the distribution.\n    * The names of any contributors may not be used to endorse or promote\n      products derived from this software without specific prior written\n      permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS AND CONTRIBUTORS BE LIABLE FOR ANY\nDIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n",
    "name": "joi"
  },
  {
    "licenses": "MIT",
    "repository": "https://github.com/localtunnel/localtunnel",
    "license": "MIT License\n\nCopyright (c) 2018 Roman Shtylman\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
    "name": "localtunnel"
  },
  {
    "licenses": "MIT",
    "repository": "https://github.com/mysqljs/mysql",
    "license": "Copyright (c) 2012 Felix Geisendörfer (felix@debuggable.com) and contributors\n\n Permission is hereby granted, free of charge, to any person obtaining a copy\n of this software and associated documentation files (the \"Software\"), to deal\n in the Software without restriction, including without limitation the rights\n to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n copies of the Software, and to permit persons to whom the Software is\n furnished to do so, subject to the following conditions:\n\n The above copyright notice and this permission notice shall be included in\n all copies or substantial portions of the Software.\n\n THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n THE SOFTWARE.\n",
    "name": "mysql"
  },
  {
    "licenses": "Apache-2.0",
    "repository": "https://github.com/rbuckton/reflect-metadata",
    "license": "Apache License\n\nVersion 2.0, January 2004\n\nhttp://www.apache.org/licenses/ \n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n\"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document.\n\n\"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License.\n\n\"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity.\n\n\"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License.\n\n\"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files.\n\n\"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types.\n\n\"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below).\n\n\"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof.\n\n\"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\"\n\n\"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions:\n\nYou must give any other recipients of the Work or Derivative Works a copy of this License; and\n\nYou must cause any modified files to carry prominent notices stating that You changed the files; and\n\nYou must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and\n\nIf the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS",
    "name": "reflect-metadata"
  },
  {
    "licenses": "Apache-2.0",
    "repository": "https://github.com/request/request",
    "license": "Apache License\n\nVersion 2.0, January 2004\n\nhttp://www.apache.org/licenses/\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n\"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document.\n\n\"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License.\n\n\"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity.\n\n\"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License.\n\n\"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files.\n\n\"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types.\n\n\"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below).\n\n\"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof.\n\n\"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\"\n\n\"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions:\n\nYou must give any other recipients of the Work or Derivative Works a copy of this License; and\n\nYou must cause any modified files to carry prominent notices stating that You changed the files; and\n\nYou must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and\n\nIf the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS",
    "name": "request"
  },
  {
    "licenses": "ISC",
    "repository": "https://github.com/isaacs/rimraf",
    "license": "The ISC License\n\nCopyright (c) Isaac Z. Schlueter and Contributors\n\nPermission to use, copy, modify, and/or distribute this software for any\npurpose with or without fee is hereby granted, provided that the above\ncopyright notice and this permission notice appear in all copies.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES\nWITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR\nANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES\nWHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN\nACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR\nIN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.\n",
    "name": "rimraf"
  },
  {
    "licenses": "Apache-2.0",
    "repository": "https://github.com/reactivex/rxjs",
    "license": "                               Apache License\n                         Version 2.0, January 2004\n                      http://www.apache.org/licenses/\n\n TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n 1. Definitions.\n\n    \"License\" shall mean the terms and conditions for use, reproduction,\n    and distribution as defined by Sections 1 through 9 of this document.\n\n    \"Licensor\" shall mean the copyright owner or entity authorized by\n    the copyright owner that is granting the License.\n\n    \"Legal Entity\" shall mean the union of the acting entity and all\n    other entities that control, are controlled by, or are under common\n    control with that entity. For the purposes of this definition,\n    \"control\" means (i) the power, direct or indirect, to cause the\n    direction or management of such entity, whether by contract or\n    otherwise, or (ii) ownership of fifty percent (50%) or more of the\n    outstanding shares, or (iii) beneficial ownership of such entity.\n\n    \"You\" (or \"Your\") shall mean an individual or Legal Entity\n    exercising permissions granted by this License.\n\n    \"Source\" form shall mean the preferred form for making modifications,\n    including but not limited to software source code, documentation\n    source, and configuration files.\n\n    \"Object\" form shall mean any form resulting from mechanical\n    transformation or translation of a Source form, including but\n    not limited to compiled object code, generated documentation,\n    and conversions to other media types.\n\n    \"Work\" shall mean the work of authorship, whether in Source or\n    Object form, made available under the License, as indicated by a\n    copyright notice that is included in or attached to the work\n    (an example is provided in the Appendix below).\n\n    \"Derivative Works\" shall mean any work, whether in Source or Object\n    form, that is based on (or derived from) the Work and for which the\n    editorial revisions, annotations, elaborations, or other modifications\n    represent, as a whole, an original work of authorship. For the purposes\n    of this License, Derivative Works shall not include works that remain\n    separable from, or merely link (or bind by name) to the interfaces of,\n    the Work and Derivative Works thereof.\n\n    \"Contribution\" shall mean any work of authorship, including\n    the original version of the Work and any modifications or additions\n    to that Work or Derivative Works thereof, that is intentionally\n    submitted to Licensor for inclusion in the Work by the copyright owner\n    or by an individual or Legal Entity authorized to submit on behalf of\n    the copyright owner. For the purposes of this definition, \"submitted\"\n    means any form of electronic, verbal, or written communication sent\n    to the Licensor or its representatives, including but not limited to\n    communication on electronic mailing lists, source code control systems,\n    and issue tracking systems that are managed by, or on behalf of, the\n    Licensor for the purpose of discussing and improving the Work, but\n    excluding communication that is conspicuously marked or otherwise\n    designated in writing by the copyright owner as \"Not a Contribution.\"\n\n    \"Contributor\" shall mean Licensor and any individual or Legal Entity\n    on behalf of whom a Contribution has been received by Licensor and\n    subsequently incorporated within the Work.\n\n 2. Grant of Copyright License. Subject to the terms and conditions of\n    this License, each Contributor hereby grants to You a perpetual,\n    worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n    copyright license to reproduce, prepare Derivative Works of,\n    publicly display, publicly perform, sublicense, and distribute the\n    Work and such Derivative Works in Source or Object form.\n\n 3. Grant of Patent License. Subject to the terms and conditions of\n    this License, each Contributor hereby grants to You a perpetual,\n    worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n    (except as stated in this section) patent license to make, have made,\n    use, offer to sell, sell, import, and otherwise transfer the Work,\n    where such license applies only to those patent claims licensable\n    by such Contributor that are necessarily infringed by their\n    Contribution(s) alone or by combination of their Contribution(s)\n    with the Work to which such Contribution(s) was submitted. If You\n    institute patent litigation against any entity (including a\n    cross-claim or counterclaim in a lawsuit) alleging that the Work\n    or a Contribution incorporated within the Work constitutes direct\n    or contributory patent infringement, then any patent licenses\n    granted to You under this License for that Work shall terminate\n    as of the date such litigation is filed.\n\n 4. Redistribution. You may reproduce and distribute copies of the\n    Work or Derivative Works thereof in any medium, with or without\n    modifications, and in Source or Object form, provided that You\n    meet the following conditions:\n\n    (a) You must give any other recipients of the Work or\n        Derivative Works a copy of this License; and\n\n    (b) You must cause any modified files to carry prominent notices\n        stating that You changed the files; and\n\n    (c) You must retain, in the Source form of any Derivative Works\n        that You distribute, all copyright, patent, trademark, and\n        attribution notices from the Source form of the Work,\n        excluding those notices that do not pertain to any part of\n        the Derivative Works; and\n\n    (d) If the Work includes a \"NOTICE\" text file as part of its\n        distribution, then any Derivative Works that You distribute must\n        include a readable copy of the attribution notices contained\n        within such NOTICE file, excluding those notices that do not\n        pertain to any part of the Derivative Works, in at least one\n        of the following places: within a NOTICE text file distributed\n        as part of the Derivative Works; within the Source form or\n        documentation, if provided along with the Derivative Works; or,\n        within a display generated by the Derivative Works, if and\n        wherever such third-party notices normally appear. The contents\n        of the NOTICE file are for informational purposes only and\n        do not modify the License. You may add Your own attribution\n        notices within Derivative Works that You distribute, alongside\n        or as an addendum to the NOTICE text from the Work, provided\n        that such additional attribution notices cannot be construed\n        as modifying the License.\n\n    You may add Your own copyright statement to Your modifications and\n    may provide additional or different license terms and conditions\n    for use, reproduction, or distribution of Your modifications, or\n    for any such Derivative Works as a whole, provided Your use,\n    reproduction, and distribution of the Work otherwise complies with\n    the conditions stated in this License.\n\n 5. Submission of Contributions. Unless You explicitly state otherwise,\n    any Contribution intentionally submitted for inclusion in the Work\n    by You to the Licensor shall be under the terms and conditions of\n    this License, without any additional terms or conditions.\n    Notwithstanding the above, nothing herein shall supersede or modify\n    the terms of any separate license agreement you may have executed\n    with Licensor regarding such Contributions.\n\n 6. Trademarks. This License does not grant permission to use the trade\n    names, trademarks, service marks, or product names of the Licensor,\n    except as required for reasonable and customary use in describing the\n    origin of the Work and reproducing the content of the NOTICE file.\n\n 7. Disclaimer of Warranty. Unless required by applicable law or\n    agreed to in writing, Licensor provides the Work (and each\n    Contributor provides its Contributions) on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n    implied, including, without limitation, any warranties or conditions\n    of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n    PARTICULAR PURPOSE. You are solely responsible for determining the\n    appropriateness of using or redistributing the Work and assume any\n    risks associated with Your exercise of permissions under this License.\n\n 8. Limitation of Liability. In no event and under no legal theory,\n    whether in tort (including negligence), contract, or otherwise,\n    unless required by applicable law (such as deliberate and grossly\n    negligent acts) or agreed to in writing, shall any Contributor be\n    liable to You for damages, including any direct, indirect, special,\n    incidental, or consequential damages of any character arising as a\n    result of this License or out of the use or inability to use the\n    Work (including but not limited to damages for loss of goodwill,\n    work stoppage, computer failure or malfunction, or any and all\n    other commercial damages or losses), even if such Contributor\n    has been advised of the possibility of such damages.\n\n 9. Accepting Warranty or Additional Liability. While redistributing\n    the Work or Derivative Works thereof, You may choose to offer,\n    and charge a fee for, acceptance of support, warranty, indemnity,\n    or other liability obligations and/or rights consistent with this\n    License. However, in accepting such obligations, You may act only\n    on Your own behalf and on Your sole responsibility, not on behalf\n    of any other Contributor, and only if You agree to indemnify,\n    defend, and hold each Contributor harmless for any liability\n    incurred by, or claims asserted against, such Contributor by reason\n    of your accepting any such warranty or additional liability.\n\n END OF TERMS AND CONDITIONS\n\n APPENDIX: How to apply the Apache License to your work.\n\n    To apply the Apache License to your work, attach the following\n    boilerplate notice, with the fields enclosed by brackets \"[]\"\n    replaced with your own identifying information. (Don't include\n    the brackets!)  The text should be enclosed in the appropriate\n    comment syntax for the file format. We also recommend that a\n    file or class name and description of purpose be included on the\n    same \"printed page\" as the copyright notice for easier\n    identification within third-party archives.\n\n Copyright (c) 2015-2018 Google, Inc., Netflix, Inc., Microsoft Corp. and contributors\n\n Licensed under the Apache License, Version 2.0 (the \"License\");\n you may not use this file except in compliance with the License.\n You may obtain a copy of the License at\n\n     http://www.apache.org/licenses/LICENSE-2.0\n\n Unless required by applicable law or agreed to in writing, software\n distributed under the License is distributed on an \"AS IS\" BASIS,\n WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n See the License for the specific language governing permissions and\n limitations under the License.\n \n",
    "name": "rxjs"
  },
  {
    "licenses": "MIT",
    "repository": "https://github.com/hacksparrow/safe-eval",
    "license": "# safe-eval [![npm version](https://badge.fury.io/js/safe-eval.svg)](https://badge.fury.io/js/safe-eval) [![Build Status](https://travis-ci.org/hacksparrow/safe-eval.svg?branch=master)](https://travis-ci.org/hacksparrow/safe-eval)\n\n**NOTE**\n\n`safe-eval` `0.3.0` and below are affected by a sandbox breakout vulnerability - [NSP 337](https://nodesecurity.io/advisories/337), [CVE-2017-16088](https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-16088).\n\nVersion `0.4.0` fixes this vulnerability. It is highly recommended to upgrade to the latest version if you are using `safe-eval` for executing code not generated by yourself. Thanks @kauegimenes for the patch.\n\n## What is this?\n\n`safe-eval` lets you execute JavaScript code without having to use the much discouraged and feared upon `eval()`. `safe-eval` has access to all the standard APIs of the [V8 JavaScript Engine](https://code.google.com/p/v8/). By default, it does not have access to the Node.js API, but can be given access using a conext object. It is implemented using [node's vm module](https://nodejs.org/api/vm.html).\n\nCurrently, it works only with Node.js, and the JavaScript code must be an expression (something which evaluates to a value).\n\n## Installation\n\n```sh\nnpm install safe-eval --save\n```\n\n## Usage\n\n```js\nvar safeEval = require('safe-eval')\n```\n\n**safeEval(code, [context], [options])**\n\n`code` is the JavaScript code you want to execute.\n\n`context` is an object of methods and properties, these methods and properties are interpreted as global objects in `code`. Be careful about the objects you are passing to the context API, because they can completely defeat the purpose of `safe-eval`.\n\n`options` is the [options object](https://nodejs.org/api/vm.html) for the vm executing the code.\n\n### Examples\n\n```js\n// string concatenation\nvar code = '\"app\" + \"le\"'\nvar evaluated = safeEval(code) // \"apple\"\n```\n\n```js\n// math\nvar code = 'Math.floor(22/7)'\nvar evaluated = safeEval(code) // 3.142857142857143\n```\n\n```js\n// JSON\nvar code = '{name: \"Borat\", hobbies: [\"disco dance\", \"sunbathing\"]}'\nvar evaluated = safeEval(code) // {name: \"Borat\", hobbies: [\"disco dance\", \"sunbathing\"]}\n```\n\n```js\n// function expression\nvar code = '(function square(b) { return b * b; })(5)'\nvar evaluated = safeEval(code) // 25\n```\n\n```js\n// no access to Node.js objects\nvar code = 'process'\nsafeEval(code) // THROWS!\n```\n\n```js\n// your own context API - access to Node's process object and a custom function\nvar code = '{pid: process.pid, apple: a()}'\nvar context = {\n  process: process,\n  a: function () { return 'APPLE' }\n}\nvar evaluated = safeEval(code, context) // { pid: 16987, apple: 'APPLE' }\n```\n\n```js\n// pass an options object to the vm\nvar code = 'process'\nsafeEval(code, {}, { filename: 'myfile.js'}) // myfile.js can be seen in the stacktrace\n```\n\n## License (MIT)\n\nCopyright (c) 2016 Hage Yaapa\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n",
    "name": "safe-eval"
  },
  {
    "licenses": "MIT",
    "repository": "https://github.com/expressjs/serve-static",
    "license": "(The MIT License)\n\nCopyright (c) 2010 Sencha Inc.\nCopyright (c) 2011 LearnBoost\nCopyright (c) 2011 TJ Holowaychuk\nCopyright (c) 2014-2016 Douglas Christopher Wilson\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
    "name": "serve-static"
  },
  {
    "licenses": "MIT",
    "repository": "https://github.com/scottie1984/swagger-ui-express",
    "license": "\nThe MIT License (MIT)\n\nCopyright (c) 2018 Scott IT London\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n",
    "name": "swagger-ui-express"
  },
  {
    "licenses": "MIT",
    "repository": "https://github.com/typeorm/typeorm",
    "license": "<div align=\"center\">\n  <a href=\"http://typeorm.io/\">\n    <img src=\"https://github.com/typeorm/typeorm/raw/master/resources/logo_big.png\" width=\"492\" height=\"228\">\n  </a>\n  <br>\n  <br>\n\t<a href=\"https://travis-ci.org/typeorm/typeorm\">\n\t\t<img src=\"https://travis-ci.org/typeorm/typeorm.svg?branch=master\">\n\t</a>\n\t<a href=\"https://badge.fury.io/js/typeorm\">\n\t\t<img src=\"https://badge.fury.io/js/typeorm.svg\">\n\t</a>\n\t<a href=\"https://david-dm.org/typeorm/typeorm\">\n\t\t<img src=\"https://david-dm.org/typeorm/typeorm.svg\">\n\t</a>\n    <a href=\"https://codecov.io/gh/typeorm/typeorm\">\n        <img alt=\"Codecov\" src=\"https://img.shields.io/codecov/c/github/typeorm/typeorm.svg\">\n    </a>\n\t<a href=\"https://join.slack.com/t/typeorm/shared_invite/enQtNDQ1MzA3MDA5MTExLTFiNDEyOGUxZGQyYWIwOTA0NDQxODdkOGQ0OTUxNzFjYjUwY2E0ZmFlODc5OTYyYzAzNGM3MGZjYzhjYTBiZTY\">\n\t\t<img src=\"https://img.shields.io/badge/chat-on%20slack-blue.svg\">\n\t</a>\n  <br>\n  <br>\n</div>\n\nTypeORM is an [ORM](https://en.wikipedia.org/wiki/Object-relational_mapping)\nthat can run in NodeJS, Browser, Cordova, PhoneGap, Ionic, React Native, NativeScript, Expo, and Electron platforms\nand can be used with TypeScript and JavaScript (ES5, ES6, ES7, ES8).\nIts goal is to always support the latest JavaScript features and provide additional features\nthat help you to develop any kind of application that uses databases - from\nsmall applications with a few tables to large scale enterprise applications\nwith multiple databases.\n\nTypeORM supports both Active Record and Data Mapper patterns,\nunlike all other JavaScript ORMs currently in existence,\nwhich means you can write high quality, loosely coupled, scalable,\nmaintainable applications the most productive way.\n\nTypeORM is highly influenced by other ORMs, such as [Hibernate](http://hibernate.org/orm/),\n [Doctrine](http://www.doctrine-project.org/) and [Entity Framework](https://www.asp.net/entity-framework).\n\nSome TypeORM features:\n\n* supports both DataMapper and ActiveRecord (your choice)\n* entities and columns\n* database-specific column types\n* entity manager\n* repositories and custom repositories\n* clean object relational model\n* associations (relations)\n* eager and lazy relations\n* uni-directional, bi-directional and self-referenced relations\n* supports multiple inheritance patterns\n* cascades\n* indices\n* transactions\n* migrations and automatic migrations generation\n* connection pooling\n* replication\n* using multiple database connections\n* working with multiple databases types\n* cross-database and cross-schema queries\n* elegant-syntax, flexible and powerful QueryBuilder\n* left and inner joins\n* proper pagination for queries using joins\n* query caching\n* streaming raw results\n* logging\n* listeners and subscribers (hooks)\n* supports closure table pattern\n* schema declaration in models or separate configuration files\n* connection configuration in json / xml / yml / env formats\n* supports MySQL / MariaDB / Postgres / CockroachDB / SQLite / Microsoft SQL Server / Oracle / sql.js\n* supports MongoDB NoSQL database\n* works in NodeJS / Browser / Ionic / Cordova / React Native / NativeScript / Expo / Electron platforms\n* TypeScript and JavaScript support\n* produced code is performant, flexible, clean and maintainable\n* follows all possible best practices\n* CLI\n\nAnd more...\n\nWith TypeORM your models look like this:\n\n```javascript\nimport {Entity, PrimaryGeneratedColumn, Column} from \"typeorm\";\n\n@Entity()\nexport class User {\n\n    @PrimaryGeneratedColumn()\n    id: number;\n\n    @Column()\n    firstName: string;\n\n    @Column()\n    lastName: string;\n\n    @Column()\n    age: number;\n\n}\n```\n\nAnd your domain logic looks like this:\n\n```javascript\nconst user = new User();\nuser.firstName = \"Timber\";\nuser.lastName = \"Saw\";\nuser.age = 25;\nawait repository.save(user);\n\nconst allUsers = await repository.find();\nconst firstUser = await repository.findOne(1); // find by id\nconst timber = await repository.findOne({ firstName: \"Timber\", lastName: \"Saw\" });\n\nawait repository.remove(timber);\n```\n\nAlternatively, if you prefer to use the `ActiveRecord` implementation, you can use it as well:\n\n```javascript\nimport {Entity, PrimaryGeneratedColumn, Column, BaseEntity} from \"typeorm\";\n\n@Entity()\nexport class User extends BaseEntity {\n\n    @PrimaryGeneratedColumn()\n    id: number;\n\n    @Column()\n    firstName: string;\n\n    @Column()\n    lastName: string;\n\n    @Column()\n    age: number;\n\n}\n```\n\nAnd your domain logic will look this way:\n\n```javascript\nconst user = new User();\nuser.firstName = \"Timber\";\nuser.lastName = \"Saw\";\nuser.age = 25;\nawait user.save();\n\nconst allUsers = await User.find();\nconst firstUser = await User.findOne(1);\nconst timber = await User.findOne({ firstName: \"Timber\", lastName: \"Saw\" });\n\nawait timber.remove();\n```\n\n## Installation\n\n\n1. Install the npm package:\n\n    `npm install typeorm --save`\n\n2. You need to install `reflect-metadata` shim:\n\n    `npm install reflect-metadata --save`\n\n    and import it somewhere in the global place of your app (for example in `app.ts`):\n\n    `import \"reflect-metadata\";`\n\n3. You may need to install node typings:\n\n    `npm install @types/node --save`\n\n4. Install a database driver:\n\n    * for **MySQL** or **MariaDB**\n\n        `npm install mysql --save` (you can install `mysql2` instead as well)\n\n    * for **PostgreSQL** or **CockroachDB**\n\n        `npm install pg --save`\n\n    * for **SQLite**\n\n        `npm install sqlite3 --save`\n\n    * for **Microsoft SQL Server**\n\n        `npm install mssql --save`\n\n    * for **sql.js**\n\n        `npm install sql.js --save`\n\n    * for **Oracle**\n\n        `npm install oracledb --save`\n\n        Install only *one* of them, depending on which database you use.\n\n        To make the Oracle driver work, you need to follow the installation instructions from\n        [their](https://github.com/oracle/node-oracledb) site.\n\n    * for **MongoDB** (experimental)\n\n        `npm install mongodb --save`\n\n    * for **NativeScript**, **react-native** and **Cordova**\n\n        Check [documentation of supported platforms](docs/supported-platforms.md)\n\n\n\n##### TypeScript configuration\n\nAlso, make sure you are using TypeScript compiler version **2.3** or greater,\nand you have enabled the following settings in `tsconfig.json`:\n\n```json\n\"emitDecoratorMetadata\": true,\n\"experimentalDecorators\": true,\n```\n\nYou may also need to enable `es6` in the `lib` section of compiler options, or install `es6-shim` from `@types`.\n\n## Quick Start\n\nThe quickest way to get started with TypeORM is to use its CLI commands to generate a starter project.\nQuick start works only if you are using TypeORM in a NodeJS application.\nIf you are using other platforms, proceed to the [step-by-step guide](#step-by-step-guide).\n\nFirst, install TypeORM globally:\n\n```\nnpm install typeorm -g\n```\n\nThen go to the directory where you want to create a new project and run the command:\n\n```\ntypeorm init --name MyProject --database mysql\n```\n\nWhere `name` is the name of your project and `database` is the database you'll use.\nDatabase can be one of the following values: `mysql`, `mariadb`, `postgres`, `cockroachdb`, `sqlite`, `mssql`, `oracle`, `mongodb`,\n`cordova`, `react-native`, `expo`, `nativescript`.\n\nThis command will generate a new project in the `MyProject` directory with the following files:\n\n```\nMyProject\n├── src              // place of your TypeScript code\n│   ├── entity       // place where your entities (database models) are stored\n│   │   └── User.ts  // sample entity\n│   ├── migration    // place where your migrations are stored\n│   └── index.ts     // start point of your application\n├── .gitignore       // standard gitignore file\n├── ormconfig.json   // ORM and database connection configuration\n├── package.json     // node module dependencies\n├── README.md        // simple readme file\n└── tsconfig.json    // TypeScript compiler options\n```\n\n> You can also run `typeorm init` on an existing node project, but be careful - it may override some files you already have.\n\nThe next step is to install new project dependencies:\n\n```\ncd MyProject\nnpm install\n```\n\nWhile installation is in progress, edit the `ormconfig.json` file and put your own database connection configuration options in there:\n\n```json\n{\n   \"type\": \"mysql\",\n   \"host\": \"localhost\",\n   \"port\": 3306,\n   \"username\": \"test\",\n   \"password\": \"test\",\n   \"database\": \"test\",\n   \"synchronize\": true,\n   \"logging\": false,\n   \"entities\": [\n      \"src/entity/**/*.ts\"\n   ],\n   \"migrations\": [\n      \"src/migration/**/*.ts\"\n   ],\n   \"subscribers\": [\n      \"src/subscriber/**/*.ts\"\n   ]\n}\n```\n\nParticularly, most of the time you'll only need to configure\n`host`, `username`, `password`, `database` and maybe `port` options.\n\nOnce you finish with configuration and all node modules are installed, you can run your application:\n\n```\nnpm start\n```\n\nThat's it, your application should successfully run and insert a new user into the database.\nYou can continue to work with this project and integrate other modules you need and start\ncreating more entities.\n\n> You can generate an even more advanced project with express installed by running\n`typeorm init --name MyProject --database mysql --express` command.\n\n## Step-by-Step Guide\n\nWhat are you expecting from ORM?\nFirst of all, you are expecting it will create database tables for you\nand find / insert / update / delete your data without the pain of\nhaving to write lots of hardly maintainable SQL queries.\nThis guide will show you how to setup TypeORM from scratch and make it do what you are expecting from an ORM.\n\n### Create a model\n\nWorking with a database starts from creating tables.\nHow do you tell TypeORM to create a database table?\nThe answer is - through the models.\nYour models in your app are your database tables.\n\nFor example, you have a `Photo` model:\n\n```javascript\nexport class Photo {\n    id: number;\n    name: string;\n    description: string;\n    filename: string;\n    views: number;\n    isPublished: boolean;\n}\n```\n\nAnd you want to store photos in your database.\nTo store things in the database, first you need a database table,\nand database tables are created from your models.\nNot all models, but only those you define as *entities*.\n\n### Create an entity\n\n*Entity* is your model decorated by an `@Entity` decorator.\nA database table will be created for such models.\nYou work with entities everywhere with TypeORM.\nYou can load/insert/update/remove and perform other operations with them.\n\nLet's make our `Photo` model as an entity:\n\n```javascript\nimport {Entity} from \"typeorm\";\n\n@Entity()\nexport class Photo {\n    id: number;\n    name: string;\n    description: string;\n    filename: string;\n    views: number;\n    isPublished: boolean;\n}\n```\n\nNow, a database table will be created for the `Photo` entity and we'll be able to work with it anywhere in our app.\nWe have created a database table, however what table can exist without columns?\nLet's create a few columns in our database table.\n\n### Adding table columns\n\nTo add database columns, you simply need to decorate an entity's properties you want to make into a column\nwith a `@Column` decorator.\n\n```javascript\nimport {Entity, Column} from \"typeorm\";\n\n@Entity()\nexport class Photo {\n\n    @Column()\n    id: number;\n\n    @Column()\n    name: string;\n\n    @Column()\n    description: string;\n\n    @Column()\n    filename: string;\n\n    @Column()\n    views: number;\n\n    @Column()\n    isPublished: boolean;\n}\n```\n\nNow `id`, `name`, `description`, `filename`, `views` and `isPublished` columns will be added to the `photo` table.\nColumn types in the database are inferred from the property types you used, e.g.\n`number` will be converted into `integer`, `string` into `varchar`, `boolean` into `bool`, etc.\nBut you can use any column type your database supports by implicitly specifying a column type into the `@Column` decorator.\n\nWe generated a database table with columns, but there is one thing left.\nEach database table must have a column with a primary key.\n\n### Creating a primary column\n\nEach entity **must** have at least one primary key column.\nThis is a requirement and you can't avoid it.\nTo make a column a primary key, you need to use `@PrimaryColumn` decorator.\n\n```javascript\nimport {Entity, Column, PrimaryColumn} from \"typeorm\";\n\n@Entity()\nexport class Photo {\n\n    @PrimaryColumn()\n    id: number;\n\n    @Column()\n    name: string;\n\n    @Column()\n    description: string;\n\n    @Column()\n    filename: string;\n\n    @Column()\n    views: number;\n\n    @Column()\n    isPublished: boolean;\n}\n```\n\n### Creating an auto generated column\n\nNow, let's say you want your id column to be auto-generated (this is known as auto-increment / sequence / serial / generated identity column).\nTo do that, you need to change the `@PrimaryColumn` decorator to a `@PrimaryGeneratedColumn` decorator:\n\n```javascript\nimport {Entity, Column, PrimaryGeneratedColumn} from \"typeorm\";\n\n@Entity()\nexport class Photo {\n\n    @PrimaryGeneratedColumn()\n    id: number;\n\n    @Column()\n    name: string;\n\n    @Column()\n    description: string;\n\n    @Column()\n    filename: string;\n\n    @Column()\n    views: number;\n\n    @Column()\n    isPublished: boolean;\n}\n```\n\n### Column data types\n\nNext, let's fix our data types. By default, string is mapped to a varchar(255)-like type (depending on the database type).\nNumber is mapped to a integer-like type (depending on the database type).\nWe don't want all our columns to be limited varchars or integers.\nLet's setup correct data types:\n\n```javascript\nimport {Entity, Column, PrimaryGeneratedColumn} from \"typeorm\";\n\n@Entity()\nexport class Photo {\n\n    @PrimaryGeneratedColumn()\n    id: number;\n\n    @Column({\n        length: 100\n    })\n    name: string;\n\n    @Column(\"text\")\n    description: string;\n\n    @Column()\n    filename: string;\n\n    @Column(\"double\")\n    views: number;\n\n    @Column()\n    isPublished: boolean;\n}\n```\n\nColumn types are database-specific.\nYou can set any column type your database supports.\nMore information on supported column types can be found [here](./docs/entities.md#column-types).\n\n### Creating a connection to the database\n\nNow, when our entity is created, let's create an `index.ts` (or `app.ts` whatever you call it) file and set up our connection there:\n\n```javascript\nimport \"reflect-metadata\";\nimport {createConnection} from \"typeorm\";\nimport {Photo} from \"./entity/Photo\";\n\ncreateConnection({\n    type: \"mysql\",\n    host: \"localhost\",\n    port: 3306,\n    username: \"root\",\n    password: \"admin\",\n    database: \"test\",\n    entities: [\n        Photo\n    ],\n    synchronize: true,\n    logging: false\n}).then(connection => {\n    // here you can start to work with your entities\n}).catch(error => console.log(error));\n```\n\nWe are using MySQL in this example, but you can use any other supported database.\nTo use another database, simply change the `type` in the options to the database type you are using:\n`mysql`, `mariadb`, `postgres`, `cockroachdb`, `sqlite`, `mssql`, `oracle`, `cordova`, `nativescript`, `react-native`,\n`expo`, or `mongodb`.\nAlso make sure to use your own host, port, username, password and database settings.\n\nWe added our Photo entity to the list of entities for this connection.\nEach entity you are using in your connection must be listed there.\n\nSetting `synchronize` makes sure your entities will be synced with the database, every time you run the application.\n\n### Loading all entities from the directory\n\nLater, when we create more entities we need to add them to the entities in our configuration.\nThis is not very convenient, so instead we can set up the whole directory, from where all entities will be connected and used in our connection:\n\n```javascript\nimport {createConnection} from \"typeorm\";\n\ncreateConnection({\n    type: \"mysql\",\n    host: \"localhost\",\n    port: 3306,\n    username: \"root\",\n    password: \"admin\",\n    database: \"test\",\n    entities: [\n        __dirname + \"/entity/*.js\"\n    ],\n    synchronize: true,\n}).then(connection => {\n    // here you can start to work with your entities\n}).catch(error => console.log(error));\n```\n\nBut be careful with this approach.\nIf you are using `ts-node` then you need to specify paths to `.ts` files instead.\nIf you are using `outDir` then you'll need to specify paths to `.js` files inside outDir directory.\nIf you are using `outDir` and when you remove or rename your entities make sure to clear `outDir` directory\nand re-compile your project again, because when you remove your source `.ts` files their compiled `.js` versions\naren't removed from output directory and still are loaded by TypeORM because they are present in the `outDir` directory.\n\n### Running the application\n\nNow if you run your `index.ts`, a connection with database will be initialized and a database table for your photos will be created.\n\n\n```shell\n+-------------+--------------+----------------------------+\n|                         photo                           |\n+-------------+--------------+----------------------------+\n| id          | int(11)      | PRIMARY KEY AUTO_INCREMENT |\n| name        | varchar(100) |                            |\n| description | text         |                            |\n| filename    | varchar(255) |                            |\n| views       | int(11)      |                            |\n| isPublished | boolean      |                            |\n+-------------+--------------+----------------------------+\n```\n\n### Creating and inserting a photo into the database\n\nNow let's create a new photo to save it in the database:\n\n```javascript\nimport {createConnection} from \"typeorm\";\nimport {Photo} from \"./entity/Photo\";\n\ncreateConnection(/*...*/).then(connection => {\n\n    let photo = new Photo();\n    photo.name = \"Me and Bears\";\n    photo.description = \"I am near polar bears\";\n    photo.filename = \"photo-with-bears.jpg\";\n    photo.views = 1;\n    photo.isPublished = true;\n\n    return connection.manager\n            .save(photo)\n            .then(photo => {\n                console.log(\"Photo has been saved. Photo id is\", photo.id);\n            });\n\n}).catch(error => console.log(error));\n```\n\nOnce your entity is saved it will get a newly generated id.\n`save` method returns an instance of the same object you pass to it.\nIt's not a new copy of the object, it modifies its \"id\" and returns it.\n\n### Using async/await syntax\n\nLet's take advantage of the latest ES8 (ES2017) features and use async/await syntax instead:\n\n```javascript\nimport {createConnection} from \"typeorm\";\nimport {Photo} from \"./entity/Photo\";\n\ncreateConnection(/*...*/).then(async connection => {\n\n    let photo = new Photo();\n    photo.name = \"Me and Bears\";\n    photo.description = \"I am near polar bears\";\n    photo.filename = \"photo-with-bears.jpg\";\n    photo.views = 1;\n    photo.isPublished = true;\n\n    await connection.manager.save(photo);\n    console.log(\"Photo has been saved\");\n\n}).catch(error => console.log(error));\n```\n\n### Using Entity Manager\n\nWe just created a new photo and saved it in the database.\nWe used `EntityManager` to save it.\nUsing entity manager you can manipulate any entity in your app.\nFor example, let's load our saved entity:\n\n```javascript\nimport {createConnection} from \"typeorm\";\nimport {Photo} from \"./entity/Photo\";\n\ncreateConnection(/*...*/).then(async connection => {\n\n    /*...*/\n    let savedPhotos = await connection.manager.find(Photo);\n    console.log(\"All photos from the db: \", savedPhotos);\n\n}).catch(error => console.log(error));\n```\n\n`savedPhotos` will be an array of Photo objects with the data loaded from the database.\n\nLearn more about EntityManager [here](./docs/working-with-entity-manager.md).\n\n### Using Repositories\n\nNow let's refactor our code and use `Repository` instead of `EntityManager`.\nEach entity has its own repository which handles all operations with its entity.\nWhen you deal with entities a lot, Repositories are more convenient to use than EntityManagers:\n\n\n```javascript\nimport {createConnection} from \"typeorm\";\nimport {Photo} from \"./entity/Photo\";\n\ncreateConnection(/*...*/).then(async connection => {\n\n    let photo = new Photo();\n    photo.name = \"Me and Bears\";\n    photo.description = \"I am near polar bears\";\n    photo.filename = \"photo-with-bears.jpg\";\n    photo.views = 1;\n    photo.isPublished = true;\n\n    let photoRepository = connection.getRepository(Photo);\n\n    await photoRepository.save(photo);\n    console.log(\"Photo has been saved\");\n\n    let savedPhotos = await photoRepository.find();\n    console.log(\"All photos from the db: \", savedPhotos);\n\n}).catch(error => console.log(error));\n```\n\nLearn more about Repository [here](./docs/working-with-repository.md).\n\n### Loading from the database\n\nLet's try more load operations using the Repository:\n\n```javascript\nimport {createConnection} from \"typeorm\";\nimport {Photo} from \"./entity/Photo\";\n\ncreateConnection(/*...*/).then(async connection => {\n\n    /*...*/\n    let allPhotos = await photoRepository.find();\n    console.log(\"All photos from the db: \", allPhotos);\n\n    let firstPhoto = await photoRepository.findOne(1);\n    console.log(\"First photo from the db: \", firstPhoto);\n\n    let meAndBearsPhoto = await photoRepository.findOne({ name: \"Me and Bears\" });\n    console.log(\"Me and Bears photo from the db: \", meAndBearsPhoto);\n\n    let allViewedPhotos = await photoRepository.find({ views: 1 });\n    console.log(\"All viewed photos: \", allViewedPhotos);\n\n    let allPublishedPhotos = await photoRepository.find({ isPublished: true });\n    console.log(\"All published photos: \", allPublishedPhotos);\n\n    let [allPhotos, photosCount] = await photoRepository.findAndCount();\n    console.log(\"All photos: \", allPhotos);\n    console.log(\"Photos count: \", photosCount);\n\n}).catch(error => console.log(error));\n```\n\n### Updating in the database\n\nNow let's load a single photo from the database, update it and save it:\n\n```javascript\nimport {createConnection} from \"typeorm\";\nimport {Photo} from \"./entity/Photo\";\n\ncreateConnection(/*...*/).then(async connection => {\n\n    /*...*/\n    let photoToUpdate = await photoRepository.findOne(1);\n    photoToUpdate.name = \"Me, my friends and polar bears\";\n    await photoRepository.save(photoToUpdate);\n\n}).catch(error => console.log(error));\n```\n\nNow photo with `id = 1` will be updated in the database.\n\n### Removing from the database\n\nNow let's remove our photo from the database:\n\n```javascript\nimport {createConnection} from \"typeorm\";\nimport {Photo} from \"./entity/Photo\";\n\ncreateConnection(/*...*/).then(async connection => {\n\n    /*...*/\n    let photoToRemove = await photoRepository.findOne(1);\n    await photoRepository.remove(photoToRemove);\n\n}).catch(error => console.log(error));\n```\n\nNow photo with `id = 1` will be removed from the database.\n\n### Creating a one-to-one relation\n\nLet's create a one-to-one relation with another class.\nLet's create a new class in `PhotoMetadata.ts`. This PhotoMetadata class is supposed to contain our photo's additional meta-information:\n\n```javascript\nimport {Entity, Column, PrimaryGeneratedColumn, OneToOne, JoinColumn} from \"typeorm\";\nimport {Photo} from \"./Photo\";\n\n@Entity()\nexport class PhotoMetadata {\n\n    @PrimaryGeneratedColumn()\n    id: number;\n\n    @Column(\"int\")\n    height: number;\n\n    @Column(\"int\")\n    width: number;\n\n    @Column()\n    orientation: string;\n\n    @Column()\n    compressed: boolean;\n\n    @Column()\n    comment: string;\n\n    @OneToOne(type => Photo)\n    @JoinColumn()\n    photo: Photo;\n}\n```\n\nHere, we are using a new decorator called `@OneToOne`. It allows us to create a one-to-one relationship between two entities.\n`type => Photo` is a function that returns the class of the entity with which we want to make our relationship.\nWe are forced to use a function that returns a class, instead of using the class directly, because of the language specifics.\nWe can also write it as `() => Photo`, but we use `type => Photo` as a convention to increase code readability.\nThe type variable itself does not contain anything.\n\nWe also add a `@JoinColumn` decorator, which indicates that this side of the relationship will own the relationship.\nRelations can be unidirectional or bidirectional.\nOnly one side of relational can be owning.\nUsing `@JoinColumn` decorator is required on the owner side of the relationship.\n\nIf you run the app, you'll see a newly generated table, and it will contain a column with a foreign key for the photo relation:\n\n```shell\n+-------------+--------------+----------------------------+\n|                     photo_metadata                      |\n+-------------+--------------+----------------------------+\n| id          | int(11)      | PRIMARY KEY AUTO_INCREMENT |\n| height      | int(11)      |                            |\n| width       | int(11)      |                            |\n| comment     | varchar(255) |                            |\n| compressed  | boolean      |                            |\n| orientation | varchar(255) |                            |\n| photoId     | int(11)      | FOREIGN KEY                |\n+-------------+--------------+----------------------------+\n```\n\n### Save a one-to-one relation\n\nNow let's save a photo, its metadata and attach them to each other.\n\n```javascript\nimport {createConnection} from \"typeorm\";\nimport {Photo} from \"./entity/Photo\";\nimport {PhotoMetadata} from \"./entity/PhotoMetadata\";\n\ncreateConnection(/*...*/).then(async connection => {\n\n    // create a photo\n    let photo = new Photo();\n    photo.name = \"Me and Bears\";\n    photo.description = \"I am near polar bears\";\n    photo.filename = \"photo-with-bears.jpg\";\n    photo.isPublished = true;\n\n    // create a photo metadata\n    let metadata = new PhotoMetadata();\n    metadata.height = 640;\n    metadata.width = 480;\n    metadata.compressed = true;\n    metadata.comment = \"cybershoot\";\n    metadata.orientation = \"portait\";\n    metadata.photo = photo; // this way we connect them\n\n    // get entity repositories\n    let photoRepository = connection.getRepository(Photo);\n    let metadataRepository = connection.getRepository(PhotoMetadata);\n\n    // first we should save a photo\n    await photoRepository.save(photo);\n\n    // photo is saved. Now we need to save a photo metadata\n    await metadataRepository.save(metadata);\n\n    // done\n    console.log(\"Metadata is saved, and relation between metadata and photo is created in the database too\");\n\n}).catch(error => console.log(error));\n```\n\n### Inverse side of the relationship\n\nRelations can be unidirectional or bidirectional.\nCurrently, our relation between PhotoMetadata and Photo is unidirectional.\nThe owner of the relation is PhotoMetadata, and Photo doesn't know anything about PhotoMetadata.\nThis makes it complicated to access PhotoMetadata from the Photo side.\nTo fix this issue we should add an inverse relation, and make relations between PhotoMetadata and Photo bidirectional.\nLet's modify our entities:\n\n```javascript\nimport {Entity, Column, PrimaryGeneratedColumn, OneToOne, JoinColumn} from \"typeorm\";\nimport {Photo} from \"./Photo\";\n\n@Entity()\nexport class PhotoMetadata {\n\n    /* ... other columns */\n\n    @OneToOne(type => Photo, photo => photo.metadata)\n    @JoinColumn()\n    photo: Photo;\n}\n```\n\n```javascript\nimport {Entity, Column, PrimaryGeneratedColumn, OneToOne} from \"typeorm\";\nimport {PhotoMetadata} from \"./PhotoMetadata\";\n\n@Entity()\nexport class Photo {\n\n    /* ... other columns */\n\n    @OneToOne(type => PhotoMetadata, photoMetadata => photoMetadata.photo)\n    metadata: PhotoMetadata;\n}\n```\n\n`photo => photo.metadata` is a function that returns the name of the inverse side of the relation.\nHere we show that the metadata property of the Photo class is where we store PhotoMetadata in the Photo class.\nInstead of passing a function that returns a property of the photo, you could alternatively simply pass a string to `@OneToOne` decorator, like `\"metadata\"`.\nBut we used this function-typed approach to make our refactoring easier.\n\nNote that we should use `@JoinColumn` decorator only on one side of a relation.\nWhichever side you put this decorator on will be the owning side of the relationship.\nThe owning side of a relationship contains a column with a foreign key in the database.\n\n### Loading objects with their relations\n\nNow let's load our photo and its photo metadata in a single query.\nThere are two ways to do it - using `find*` methods or using `QueryBuilder` functionality.\nLet's use `find*` methods first.\n`find*` methods allow you to specify an object with the `FindOneOptions` / `FindManyOptions` interface.\n\n```javascript\nimport {createConnection} from \"typeorm\";\nimport {Photo} from \"./entity/Photo\";\nimport {PhotoMetadata} from \"./entity/PhotoMetadata\";\n\ncreateConnection(/*...*/).then(async connection => {\n\n    /*...*/\n    let photoRepository = connection.getRepository(Photo);\n    let photos = await photoRepository.find({ relations: [\"metadata\"] });\n\n}).catch(error => console.log(error));\n```\n\nHere, photos will contain an array of photos from the database, and each photo will contain its photo metadata.\nLearn more about Find Options in [this documentation](./docs/find-options.md).\n\nUsing find options is good and dead simple, but if you need a more complex query, you should use `QueryBuilder` instead.\n`QueryBuilder` allows more complex queries to be used in an elegant way:\n\n```javascript\nimport {createConnection} from \"typeorm\";\nimport {Photo} from \"./entity/Photo\";\nimport {PhotoMetadata} from \"./entity/PhotoMetadata\";\n\ncreateConnection(/*...*/).then(async connection => {\n\n    /*...*/\n    let photos = await connection\n            .getRepository(Photo)\n            .createQueryBuilder(\"photo\")\n            .innerJoinAndSelect(\"photo.metadata\", \"metadata\")\n            .getMany();\n\n\n}).catch(error => console.log(error));\n```\n\n`QueryBuilder` allows creation and execution of SQL queries of almost any complexity.\nWhen you work with `QueryBuilder`, think like you are creating an SQL query.\nIn this example, \"photo\" and \"metadata\" are aliases applied to selected photos.\nYou use aliases to access columns and properties of the selected data.\n\n### Using cascades to automatically save related objects\n\nWe can setup cascade options in our relations, in the cases when we want our related object to be saved whenever the other object is saved.\nLet's change our photo's `@OneToOne` decorator a bit:\n\n```javascript\nexport class Photo {\n    /// ... other columns\n\n    @OneToOne(type => PhotoMetadata, metadata => metadata.photo, {\n        cascade: true,\n    })\n    metadata: PhotoMetadata;\n}\n```\n\nUsing `cascade` allows us not to separately save photo and separately save metadata objects now.\nNow we can simply save a photo object, and the metadata object will be saved automatically because of cascade options.\n\n```javascript\ncreateConnection(options).then(async connection => {\n\n    // create photo object\n    let photo = new Photo();\n    photo.name = \"Me and Bears\";\n    photo.description = \"I am near polar bears\";\n    photo.filename = \"photo-with-bears.jpg\";\n    photo.isPublished = true;\n\n    // create photo metadata object\n    let metadata = new PhotoMetadata();\n    metadata.height = 640;\n    metadata.width = 480;\n    metadata.compressed = true;\n    metadata.comment = \"cybershoot\";\n    metadata.orientation = \"portait\";\n\n    photo.metadata = metadata; // this way we connect them\n\n    // get repository\n    let photoRepository = connection.getRepository(Photo);\n\n    // saving a photo also save the metadata\n    await photoRepository.save(photo);\n\n    console.log(\"Photo is saved, photo metadata is saved too.\")\n\n}).catch(error => console.log(error));\n```\n\n### Creating a many-to-one / one-to-many relation\n\nLet's create a many-to-one / one-to-many relation.\nLet's say a photo has one author, and each author can have many photos.\nFirst, let's create an `Author` class:\n\n```javascript\nimport {Entity, Column, PrimaryGeneratedColumn, OneToMany, JoinColumn} from \"typeorm\";\nimport {Photo} from \"./Photo\";\n\n@Entity()\nexport class Author {\n\n    @PrimaryGeneratedColumn()\n    id: number;\n\n    @Column()\n    name: string;\n\n    @OneToMany(type => Photo, photo => photo.author) // note: we will create author property in the Photo class below\n    photos: Photo[];\n}\n```\n\n`Author` contains an inverse side of a relation.\n`OneToMany` is always an inverse side of relation, and it can't exist without `ManyToOne` on the other side of the relation.\n\nNow let's add the owner side of the relation into the Photo entity:\n\n```javascript\nimport {Entity, Column, PrimaryGeneratedColumn, ManyToOne} from \"typeorm\";\nimport {PhotoMetadata} from \"./PhotoMetadata\";\nimport {Author} from \"./Author\";\n\n@Entity()\nexport class Photo {\n\n    /* ... other columns */\n\n    @ManyToOne(type => Author, author => author.photos)\n    author: Author;\n}\n```\n\nIn many-to-one / one-to-many relation, the owner side is always many-to-one.\nIt means that the class that uses `@ManyToOne` will store the id of the related object.\n\nAfter you run the application, the ORM will create the `author` table:\n\n\n```shell\n+-------------+--------------+----------------------------+\n|                          author                         |\n+-------------+--------------+----------------------------+\n| id          | int(11)      | PRIMARY KEY AUTO_INCREMENT |\n| name        | varchar(255) |                            |\n+-------------+--------------+----------------------------+\n```\n\nIt will also modify the `photo` table, adding a new `author` column and creating a foreign key for it:\n\n```shell\n+-------------+--------------+----------------------------+\n|                         photo                           |\n+-------------+--------------+----------------------------+\n| id          | int(11)      | PRIMARY KEY AUTO_INCREMENT |\n| name        | varchar(255) |                            |\n| description | varchar(255) |                            |\n| filename    | varchar(255) |                            |\n| isPublished | boolean      |                            |\n| authorId    | int(11)      | FOREIGN KEY                |\n+-------------+--------------+----------------------------+\n```\n\n### Creating a many-to-many relation\n\nLet's create a many-to-one / many-to-many relation.\nLet's say a photo can be in many albums, and each album can contain many photos.\nLet's create an `Album` class:\n\n```javascript\nimport {Entity, PrimaryGeneratedColumn, Column, ManyToMany, JoinTable} from \"typeorm\";\n\n@Entity()\nexport class Album {\n\n    @PrimaryGeneratedColumn()\n    id: number;\n\n    @Column()\n    name: string;\n\n    @ManyToMany(type => Photo, photo => photo.albums)\n    @JoinTable()\n    photos: Photo[];\n}\n```\n\n`@JoinTable` is required to specify that this is the owner side of the relationship.\n\nNow let's add the inverse side of our relation to the `Photo` class:\n\n```javascript\nexport class Photo {\n    /// ... other columns\n\n    @ManyToMany(type => Album, album => album.photos)\n    albums: Album[];\n}\n```\n\nAfter you run the application, the ORM will create a **album_photos_photo_albums** *junction table*:\n\n```shell\n+-------------+--------------+----------------------------+\n|                album_photos_photo_albums                |\n+-------------+--------------+----------------------------+\n| album_id    | int(11)      | PRIMARY KEY FOREIGN KEY    |\n| photo_id    | int(11)      | PRIMARY KEY FOREIGN KEY    |\n+-------------+--------------+----------------------------+\n```\n\nDon't forget to register the `Album` class with your connection in the ORM:\n\n```javascript\nconst options: ConnectionOptions = {\n    // ... other options\n    entities: [Photo, PhotoMetadata, Author, Album]\n};\n```\n\nNow let's insert albums and photos to our database:\n\n```javascript\nlet connection = await createConnection(options);\n\n// create a few albums\nlet album1 = new Album();\nalbum1.name = \"Bears\";\nawait connection.manager.save(album1);\n\nlet album2 = new Album();\nalbum2.name = \"Me\";\nawait connection.manager.save(album2);\n\n// create a few photos\nlet photo = new Photo();\nphoto.name = \"Me and Bears\";\nphoto.description = \"I am near polar bears\";\nphoto.filename = \"photo-with-bears.jpg\";\nphoto.albums = [album1, album2];\nawait connection.manager.save(photo);\n\n// now our photo is saved and albums are attached to it\n// now lets load them:\nconst loadedPhoto = await connection\n    .getRepository(Photo)\n    .findOne(1, { relations: [\"albums\"] });\n```\n\n`loadedPhoto` will be equal to:\n\n```javascript\n{\n    id: 1,\n    name: \"Me and Bears\",\n    description: \"I am near polar bears\",\n    filename: \"photo-with-bears.jpg\",\n    albums: [{\n        id: 1,\n        name: \"Bears\"\n    }, {\n        id: 2,\n        name: \"Me\"\n    }]\n}\n```\n\n### Using QueryBuilder\n\nYou can use QueryBuilder to build SQL queries of almost any complexity. For example, you can do this:\n\n```javascript\nlet photos = await connection\n    .getRepository(Photo)\n    .createQueryBuilder(\"photo\") // first argument is an alias. Alias is what you are selecting - photos. You must specify it.\n    .innerJoinAndSelect(\"photo.metadata\", \"metadata\")\n    .leftJoinAndSelect(\"photo.albums\", \"album\")\n    .where(\"photo.isPublished = true\")\n    .andWhere(\"(photo.name = :photoName OR photo.name = :bearName)\")\n    .orderBy(\"photo.id\", \"DESC\")\n    .skip(5)\n    .take(10)\n    .setParameters({ photoName: \"My\", bearName: \"Mishka\" })\n    .getMany();\n```\n\nThis query selects all published photos with \"My\" or \"Mishka\" names.\nIt will select results from position 5 (pagination offset),\nand will select only 10 results (pagination limit).\nThe selection result will be ordered by id in descending order.\nThe photo's albums will be left-joined and their metadata will be inner joined.\n\nYou'll use the query builder in your application a lot.\nLearn more about QueryBuilder [here](./docs/select-query-builder.md).\n\n## Samples\n\nTake a look at the samples in [sample](https://github.com/typeorm/typeorm/tree/master/sample) for examples of usage.\n\nThere are a few repositories which you can clone and start with:\n\n* [Example how to use TypeORM with TypeScript](https://github.com/typeorm/typescript-example)\n* [Example how to use TypeORM with JavaScript](https://github.com/typeorm/javascript-example)\n* [Example how to use TypeORM with JavaScript and Babel](https://github.com/typeorm/babel-example)\n* [Example how to use TypeORM with TypeScript and SystemJS in Browser](https://github.com/typeorm/browser-example)\n* [Example how to use Express and TypeORM](https://github.com/typeorm/typescript-express-example)\n* [Example how to use Koa and TypeORM](https://github.com/typeorm/typescript-koa-example)\n* [Example how to use TypeORM with MongoDB](https://github.com/typeorm/mongo-typescript-example)\n* [Example how to use TypeORM in a Cordova/PhoneGap app](https://github.com/typeorm/cordova-example)\n* [Example how to use TypeORM with an Ionic app](https://github.com/typeorm/ionic-example)\n* [Example how to use TypeORM with React Native](https://github.com/typeorm/react-native-example)\n* [Example how to use TypeORM with Electron using JavaScript](https://github.com/typeorm/electron-javascript-example)\n* [Example how to use TypeORM with Electron using TypeScript](https://github.com/typeorm/electron-typescript-example)\n\n## Extensions\n\nThere are several extensions that simplify working with TypeORM and integrating it with other modules:\n\n* [TypeORM + GraphQL framework](http://vesper-framework.com)\n* [TypeORM integration](https://github.com/typeorm/typeorm-typedi-extensions) with [TypeDI](https://github.com/pleerock/typedi)\n* [TypeORM integration](https://github.com/typeorm/typeorm-routing-controllers-extensions) with [routing-controllers](https://github.com/pleerock/routing-controllers)\n* Models generation from existing database - [typeorm-model-generator](https://github.com/Kononnable/typeorm-model-generator)\n* Fixtures loader - [typeorm-fixtures-cli](https://github.com/RobinCK/typeorm-fixtures)\n\n## Contributing\n\nLearn about contribution [here](https://github.com/typeorm/typeorm/blob/master/CONTRIBUTING.md) and how to setup your development environment [here](https://github.com/typeorm/typeorm/blob/master/DEVELOPER.md).\n\nThis project exists thanks to all the people who contribute:\n\n<a href=\"https://github.com/typeorm/typeorm/graphs/contributors\"><img src=\"https://opencollective.com/typeorm/contributors.svg?width=890&showBtn=false\" /></a>\n\n## Sponsors\n\nOpen source is hard and time-consuming. If you want to invest into TypeORM's future you can become a sponsor and make our core team to spend more time on TypeORM's improvements and new features. [Become a sponsor](https://opencollective.com/typeorm)\n\n<a href=\"https://opencollective.com/typeorm\" target=\"_blank\"><img src=\"https://opencollective.com/typeorm/tiers/sponsor.svg?width=890\"></a>\n\n## Gold Sponsors\n\nBecome a gold sponsor and get a premium technical support from our core contributors. [Become a gold sponsor](https://opencollective.com/typeorm)\n\n<a href=\"https://opencollective.com/typeorm\" target=\"_blank\"><img src=\"https://opencollective.com/typeorm/tiers/gold-sponsor.svg?width=890\"></a>\n",
    "name": "typeorm"
  },
  {
    "licenses": "MIT",
    "repository": "https://github.com/Mrtenz/typeorm-store",
    "license": "MIT License\n\nCopyright (c) 2018 Maarten Zuidhoorn\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
    "name": "typeorm-store"
  },
  {
    "licenses": "Apache-2.0",
    "repository": "https://github.com/Microsoft/TypeScript",
    "license": "Apache License\r\n\r\nVersion 2.0, January 2004\r\n\r\nhttp://www.apache.org/licenses/ \r\n\r\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\r\n\r\n1. Definitions.\r\n\r\n\"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document.\r\n\r\n\"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License.\r\n\r\n\"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity.\r\n\r\n\"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License.\r\n\r\n\"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files.\r\n\r\n\"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types.\r\n\r\n\"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below).\r\n\r\n\"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof.\r\n\r\n\"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\"\r\n\r\n\"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work.\r\n\r\n2. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form.\r\n\r\n3. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed.\r\n\r\n4. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions:\r\n\r\nYou must give any other recipients of the Work or Derivative Works a copy of this License; and\r\n\r\nYou must cause any modified files to carry prominent notices stating that You changed the files; and\r\n\r\nYou must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and\r\n\r\nIf the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License.\r\n\r\n5. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions.\r\n\r\n6. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file.\r\n\r\n7. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License.\r\n\r\n8. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages.\r\n\r\n9. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability.\r\n\r\nEND OF TERMS AND CONDITIONS\r\n",
    "name": "typescript"
  },
  {
    "licenses": "MIT",
    "repository": "https://github.com/winstonjs/winston",
    "license": "Copyright (c) 2010 Charlie Robbins\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.",
    "name": "winston"
  }
]